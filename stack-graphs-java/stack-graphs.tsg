;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

; ######                                                   
; #     # #####   ####   ####  #####    ##   #    #  ####  
; #     # #    # #    # #    # #    #  #  #  ##  ## #      
; ######  #    # #    # #      #    # #    # # ## #  ####  
; #       #####  #    # #  ### #####  ###### #    #      # 
; #       #   #  #    # #    # #   #  #    # #    # #    # 
; #       #    #  ####   ####  #    # #    # #    #  ####  
;
; ########################################################

;; Attributes defined on programs
;
; out .lexical_scope
;     Lexical scope.
;
; in .defs
;     Lexical and variable definitions.
;

(program)@prog {
  node @prog.defs
  node @prog.lexical_scope
}

(program (_)@declaration)@prog {
  print @declaration

  edge @declaration.lexical_scope -> @prog.lexical_scope
  edge @prog.lexical_scope -> @declaration.lexical_defs
}

;; Declarations
[
  (class_declaration)
]@declaration {
  node @declaration.lexical_scope
  node @declaration.lexical_defs
}

;; Class Expressions

; class Bar extends Foo {
;   baz() {}
; }

; class Foo {
; }

(class_declaration
  name: (identifier) @name) @class
{
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Expressions and Statements

(block) @block {
  node @block.before_scope
  node @block.after_scope
}

(block
  (_) @left
  .
  (_) @right
)
{
  edge @right.before_scope -> @left.after_scope
}

(block
  .
  (_) @first) @block {
  edge @first.before_scope -> @block.before_scope
}

(block
  (_) @last
  . ) @block {
  edge @block.after_scope -> @last.after_scope
}

(local_variable_declaration
  declarator: (variable_declarator
    name: (_) @name
  )
) @local_var
{
  node @local_var.before_scope
  node @local_var.after_scope
  node pop
  attr (pop) node_definition = @name
  edge @local_var.after_scope -> pop
  edge @local_var.after_scope -> @local_var.before_scope
}

(expression_statement) @expr_stmt
{
  node @expr_stmt.before_scope
  node @expr_stmt.after_scope
}

(expression_statement (_) @expr) @expr_stmt
{
  edge @expr.before_scope -> @expr_stmt.before_scope
  edge @expr_stmt.after_scope -> @expr.after_scope
}

(primary_expression/identifier) @ident
{
  node @ident.value
  attr (@ident.value) node_reference = @ident
  node @ident.before_scope
  node @ident.after_scope

  edge @ident.after_scope -> @ident.before_scope
  edge @ident.value -> @ident.before_scope
}

;;;;;;;;;;;
;; Comments

(line_comment)@line_comment {
  node @line_comment.lexical_scope
  node @line_comment.lexical_defs
  node @line_comment.before_scope
  node @line_comment.after_scope

  edge @line_comment.after_scope -> @line_comment.before_scope
}

(block_comment)@block_comment {
  node @block_comment.lexical_scope
  node @block_comment.lexical_defs
  node @block_comment.before_scope
  node @block_comment.after_scope
  edge @block_comment.after_scope -> @block_comment.before_scope
}
