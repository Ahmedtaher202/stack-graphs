;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

; ######
; #     # #####   ####   ####  #####    ##   #    #  ####
; #     # #    # #    # #    # #    #  #  #  ##  ## #
; ######  #    # #    # #      #    # #    # # ## #  ####
; #       #####  #    # #  ### #####  ###### #    #      #
; #       #   #  #    # #    # #   #  #    # #    # #    #
; #       #    #  ####   ####  #    # #    # #    #  ####
;
; ########################################################

(program)@prog {
  node @prog.defs
  node @prog.lexical_scope
  edge @prog.lexical_scope -> ROOT_NODE
  edge ROOT_NODE -> @prog.defs
}

(program (_)@declaration)@prog {
  edge @prog.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @prog.lexical_scope
}


;; =======================
;;  Top level declarations
;; =======================

(import_declaration) @import {
  node @import.defs
  node @import.lexical_scope
}

(import_declaration
  (scoped_identifier
    name: (identifier) @scope_name)
  ) @import {

  node @scope_name.value
  attr (@scope_name.value) node_definition = @scope_name

  edge @import.defs -> @scope_name.value
}

(import_declaration
  (scoped_identifier
    scope: (scoped_identifier
    name: (identifier) @name))) @import {
  node @name.value
  attr (@name.value) node_definition = @name

  edge @import.defs -> @name.value
}

;;;;;;;;;;;;;;;;;;;;
;; Class Expressions

(class_declaration
  name: (identifier) @name
  body: (class_body) @class_body) @class {

  node def
  node @class.lexical_scope
  node @class.defs
  attr (def) node_definition = @name

  edge @class_body.lexical_scope -> @class.lexical_scope

  edge @class_body.lexical_scope -> @class_body.defs
  attr (@class_body.lexical_scope -> @class_body.defs) precedence = 1
  edge @class.defs -> def
  edge def -> @class_body.defs
}

(class_declaration
  superclass: (superclass
    (type_identifier) @identifier)
    body: (class_body) @class_body) @class {

    node @class.expr_def__ns
    attr (@class.expr_def__ns) push_symbol = "%E"

    node ref
    attr (ref) node_reference = @identifier

    edge ref -> @class.lexical_scope
    edge @class_body.lexical_scope -> ref
    edge @class_body.lexical_scope -> @class.expr_def__ns
}

(class_body) @class_body {
  node @class_body.lexical_scope
  node @class_body.defs
}

(class_body (_)@declaration)@class_body {
  edge @class_body.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @class_body.lexical_scope
}

;; =====================
;;  Member Declarations
;; =====================

(field_declaration
  declarator: (variable_declarator
    name: (_) @name
  )
) @field_decl
{
  node @field_decl.lexical_scope
  node @field_decl.defs
  node def
  attr (def) node_definition = @name
  edge @field_decl.defs -> def
}

(method_declaration
  name: (identifier) @name
  body: (block) @block) @method
{
  node @method.defs
  node @method.lexical_scope

  node @name.expr_ref
  attr (@name.expr_ref) node_reference = @name

  node @name.expr_ref__ns
  attr(@name.expr_ref__ns) pop_symbol = "%E"

  node def
  attr (def) node_definition = @name

  edge @method.defs -> @name.expr_ref__ns
  attr(@method.defs -> @name.expr_ref__ns) precedence = 1
  edge @name.expr_ref__ns -> def
  attr(@name.expr_ref__ns -> def) precedence = 1
  edge @method.defs -> def
}

(method_declaration
  body: (_) @stmt) @method
{
  edge @stmt.before_scope -> @method.lexical_scope
}


;; ============
;;  Statements
;; ============

(expression_statement (_) @expr) @expr_stmt
{
  node @expr_stmt.before_scope
  node @expr_stmt.after_scope
  edge @expr.lexical_scope -> @expr_stmt.before_scope
  edge @expr_stmt.after_scope -> @expr_stmt.before_scope
}

(block) @block {
  node @block.before_scope
  node @block.after_scope
}

(block
  (_) @left
  .
  (_) @right
)
{
  edge @right.before_scope -> @left.after_scope
}

(block
  .
  (_) @first) @block {
  edge @first.before_scope -> @block.before_scope
}

(block
  (_) @last
  . ) @block {
  edge @block.after_scope -> @last.after_scope
}

(return_statement) @return_stmt
{
  node @return_stmt.before_scope
  node @return_stmt.after_scope
}

(local_variable_declaration
  declarator: (variable_declarator
    name: (_) @name
  )
) @local_var
{
  node def
  attr (def) node_definition = @name
  edge @local_var.after_scope -> def
  edge @local_var.after_scope -> @local_var.before_scope
  attr (@local_var.after_scope -> @local_var.before_scope) precedence = 1
}

(local_variable_declaration
  declarator: (variable_declarator
    value: (_) @value
  )
) @local_var
{
  node @local_var.after_scope
  node @local_var.before_scope
}

(local_variable_declaration
  type: (generic_type
    (type_identifier) @type
    (type_arguments
      (type_identifier) @type_identifier))) @local_var {
  node @type_identifier.value
  attr(@type_identifier.value) node_reference = @type_identifier

  node @type.value
  attr(@type.value) node_reference = @type

  edge @type.value -> @local_var.after_scope
  edge @type_identifier.value -> @local_var.after_scope
}

;; =============
;;  Expressions
;; =============

(assignment_expression) @assign_expr
{
  node @assign_expr.lexical_scope
}

;; =====================
;;  Primary Expressions
;; =====================

(primary_expression/identifier) @ident
{
  node @ident.value
  attr (@ident.value) node_reference = @ident
  node @ident.before_scope
  node @ident.after_scope
  node @ident.lexical_scope

  edge @ident.value -> @ident.lexical_scope
}

(field_access) @field_access {
  node @field_access.lexical_scope
  node @field_access.before_scope
}

(field_access
  object: (super)
  field: (identifier) @identifier) @field_access {
  node ref
  attr (ref) node_reference = @identifier
  edge ref -> @field_access.lexical_scope
}

(method_invocation) @method_invocation
{
  node @method_invocation.before_scope
  node @method_invocation.after_scope
  node @method_invocation.lexical_scope
}

(method_invocation
  name: (identifier) @method_name) @method_invocation {
  node @method_name.value
  attr (@method_name.value) node_reference = @method_name
  ; TODO: remove this if not needed for super
  edge @method_name.value -> @method_invocation.before_scope
  node @method_invocation.defs
  edge @method_name.value -> @method_invocation.lexical_scope
}

(local_variable_declaration
  type: (type_identifier) @type
  declarator: (variable_declarator
    name: (identifier) @identifier
    value: (object_creation_expression
      type: (type_identifier) @object)
  )) @local_variable {
  node @object.value
  attr (@object.value) node_reference = @object
  node @type.value
  attr(@type.value) node_reference = @type
  edge @type.value -> @local_variable.after_scope
  edge @local_variable.after_scope -> @object.value
  edge @object.value -> @local_variable.after_scope
}

(expression_statement
  (method_invocation
    object: (identifier) @identifier
    name: (identifier) @method_name) @method_invocation) @expr_stmt {

  node @identifier.ref
  attr (@identifier.ref) node_reference = @identifier

  edge @identifier.ref -> @method_invocation.lexical_scope
  edge @expr_stmt.after_scope -> @method_invocation.lexical_scope
}

[
  ; FIXME: all expressions should be here
  (field_access)
  (identifier)
  (method_invocation)
  (super)
] @expr
{
  node @expr.type
  ; node @expr.lexical_scope
}

(method_invocation
  object: (super)
  name: (identifier) @method_name) @method_invocation {
    node expr_ref
    attr (expr_ref) node_reference = @method_name
    node expr_ref__ns
    attr (expr_ref__ns) push_symbol = "%E"
    edge @method_name.value -> expr_ref__ns
    attr(@method_name.value -> expr_ref__ns) precedence = 1
    edge expr_ref__ns -> @method_invocation.lexical_scope
}

;; ==========
;;  Comments
;; ==========

(line_comment)@line_comment {
  node @line_comment.before_scope
  node @line_comment.after_scope
  node @line_comment.lexical_defs
  node @line_comment.lexical_scope
  node @line_comment.defs

  edge @line_comment.after_scope -> @line_comment.before_scope
}

(block_comment)@block_comment {
  node @block_comment.before_scope
  node @block_comment.after_scope

  edge @block_comment.after_scope -> @block_comment.before_scope
}
