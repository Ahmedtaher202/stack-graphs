;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

; ######                                                   
; #     # #####   ####   ####  #####    ##   #    #  ####  
; #     # #    # #    # #    # #    #  #  #  ##  ## #      
; ######  #    # #    # #      #    # #    # # ## #  ####  
; #       #####  #    # #  ### #####  ###### #    #      # 
; #       #   #  #    # #    # #   #  #    # #    # #    # 
; #       #    #  ####   ####  #    # #    # #    #  ####  
;
; ########################################################

(program)@prog {
  node @prog.defs
  node @prog.lexical_scope
  edge @prog.lexical_scope -> ROOT_NODE
  edge ROOT_NODE -> @prog.defs
}

(program (_)@declaration)@prog {
  edge @prog.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @prog.lexical_scope
}


;; Class Expressions

(class_declaration
  name: (identifier) @name
  body: (class_body) @class_body) @class {

  node @name.pop
  node @class.lexical_scope
  node @class.defs
  attr (@name.pop) node_definition = @name

  edge @class_body.lexical_scope -> @class.lexical_scope

  edge @class_body.lexical_scope -> @class_body.defs
  attr (@class_body.lexical_scope -> @class_body.defs) precedence = 1
  edge @class.defs -> @name.pop
  edge @name.pop -> @class_body.defs
}

(class_declaration
  superclass: (superclass
    (type_identifier) @identifier) @superclass
    body: (class_body) @class_body) @class {

    node @identifier.ref
    attr (@identifier.ref) node_reference = @identifier

    edge @identifier.ref -> @class.lexical_scope
    edge @class_body.lexical_scope -> @identifier.ref
}

(class_body) @class_body {
  node @class_body.lexical_scope
  node @class_body.defs
}

(class_body (_)@declaration)@class_body {
  edge @class_body.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @class_body.lexical_scope
}

(method_invocation
  name: (identifier) @method_name) @method_invocation {

  node @method_name.value
  attr (@method_name.value) node_reference = @method_name
  edge @method_name.value -> @method_invocation.before_scope
  node @method_invocation.defs
  edge @method_name.value -> @method_invocation.lexical_scope
}

(method_invocation
  object: (super) @super
  name: (identifier) @method_name) @method_invocation {
}

(method_invocation) @method_invocation
{
  node @method_invocation.before_scope
  node @method_invocation.after_scope
  node @method_invocation.lexical_scope
}

(method_declaration
  name: (identifier) @name
  body: (block) @block) @method
{
  node @method.defs
  node @method.lexical_scope

  node pop
  attr (pop) node_definition = @name

  edge @method.defs -> pop
}

(method_declaration
  body: (_) @stmt) @method
{
  edge @stmt.before_scope -> @method.lexical_scope
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Expressions and Statements

(block) @block {
  node @block.before_scope
  node @block.after_scope
}

(block
  (_) @left
  .
  (_) @right
)
{
  edge @right.before_scope -> @left.after_scope
}

(block
  .
  (_) @first) @block {
  edge @first.before_scope -> @block.before_scope
}

(block
  (_) @last
  . ) @block {
  edge @block.after_scope -> @last.after_scope
}

;;;;;;;;;;;;;
;; Statements

;(statement) @stmt
;{
;  node @stmt.before_scope
;  node @stmt.after_scope
;}

(field_declaration
  declarator: (variable_declarator
    name: (_) @name
  )
) @field_decl
{
  node @field_decl.lexical_scope
  node @field_decl.defs
  node @name.pop
  attr (@name.pop) node_definition = @name
  edge @field_decl.defs -> @name.pop
}

(local_variable_declaration
  declarator: (variable_declarator
    name: (_) @name
  )
) @local_var
{
  node pop
  attr (pop) node_definition = @name
  edge @local_var.after_scope -> pop
  attr (@local_var.after_scope -> pop) precedence = 1
  edge @local_var.after_scope -> @local_var.before_scope
}

(local_variable_declaration
  declarator: (variable_declarator
    value: (_) @value
  )
) @local_var
{
  node @local_var.after_scope
  node @local_var.before_scope
}

(expression_statement (_) @expr) @expr_stmt
{
  node @expr_stmt.before_scope
  node @expr_stmt.after_scope
  edge @expr.lexical_scope -> @expr_stmt.before_scope
  edge @expr_stmt.after_scope -> @expr_stmt.before_scope
}

(primary_expression/identifier) @ident
{
  node @ident.value
  attr (@ident.value) node_reference = @ident
  node @ident.before_scope
  node @ident.after_scope
  node @ident.lexical_scope

  edge @ident.value -> @ident.lexical_scope
}

;;;;;;;;;;;
;; Comments

(line_comment)@line_comment {
  node @line_comment.before_scope
  node @line_comment.after_scope
  node @line_comment.lexical_defs
  node @line_comment.lexical_scope
  node @line_comment.defs

  edge @line_comment.after_scope -> @line_comment.before_scope
}

(block_comment)@block_comment {
  node @block_comment.before_scope
  node @block_comment.after_scope

  edge @block_comment.after_scope -> @block_comment.before_scope
}
