;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

; ######
; #     # #####   ####   ####  #####    ##   #    #  ####
; #     # #    # #    # #    # #    #  #  #  ##  ## #
; ######  #    # #    # #      #    # #    # # ## #  ####
; #       #####  #    # #  ### #####  ###### #    #      #
; #       #   #  #    # #    # #   #  #    # #    # #    #
; #       #    #  ####   ####  #    # #    # #    #  ####
;
; ########################################################

(program)@prog {
  node @prog.defs
  node @prog.lexical_scope
  edge @prog.lexical_scope -> ROOT_NODE
  edge ROOT_NODE -> @prog.defs
}

(program (_)@declaration)@prog {
  edge @prog.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @prog.lexical_scope
}


;; =======================
;;  Top level declarations
;; =======================

(import_declaration) @import {
  node @import.defs
  node @import.lexical_scope
}

(import_declaration
  (scoped_identifier
    name: (identifier) @scope_name)
  ) @import {

  node @scope_name.value
  attr (@scope_name.value) node_definition = @scope_name

  edge @import.defs -> @scope_name.value
}

(import_declaration
  (scoped_identifier
    scope: (scoped_identifier
    name: (identifier) @name))) @import {
  node @name.value
  attr (@name.value) node_definition = @name

  edge @import.defs -> @name.value
}

;;;;;;;;;;;;;;;;;;;;
;; Class Expressions

(class_declaration
  name: (identifier) @name
  body: (class_body) @class_body) @class {

  node def
  node @class.lexical_scope
  node @class.defs
  attr (def) node_definition = @name

  node ref
  attr (ref) node_reference = @name
  edge ref -> @class.lexical_scope
  edge @class_body.lexical_scope -> ref

  edge @class_body.lexical_scope -> @class.lexical_scope

  edge @class_body.lexical_scope -> @class_body.defs
  attr (@class_body.lexical_scope -> @class_body.defs) precedence = 1
  edge @class.defs -> def
  edge def -> @class_body.defs

  node this__expr_def
  node @class.type

  edge @class.lexical_scope -> this__expr_def

  attr (this__expr_def) pop_symbol = "this", source_node = @class, empty_source_span
  edge this__expr_def -> @class.type

  attr (@class.type) pop_symbol = ":"

  edge @class.type -> ref
  attr (@class.type -> ref) precedence = 1
}

(class_declaration
  superclass: (superclass
    (type_identifier) @identifier) @superclass
    body: (class_body) @class_body) @class {

    node ref
    attr (ref) node_reference = @identifier

    edge ref -> @class.lexical_scope
    edge @class_body.lexical_scope -> ref

    node super__expr_def
    node super__expr_def__typeof

    edge @class.lexical_scope -> super__expr_def

    attr (super__expr_def) pop_symbol = "super", source_node = @superclass, empty_source_span
    edge super__expr_def -> super__expr_def__typeof

    attr (super__expr_def__typeof) pop_symbol = ":"

    edge super__expr_def__typeof -> ref
    edge @class.type -> ref
}


(class_declaration (type_parameters)) @class {
  node @class.type_parameters
  edge @class.lexical_scope -> @class.type_parameters
}

(class_declaration (type_parameters (type_parameter) @param)) @class {
  edge @class.type_parameters -> @param.def
  edge @param.lexical_scope -> @class.lexical_scope
}

(type_parameter (type_identifier) @id) @this {
  node @this.def
  node @this.lexical_scope

  edge @id.lexical_scope -> @this.lexical_scope

  attr (@this.def) node_definition = @id
}

(class_body) @class_body {
  node @class_body.lexical_scope
  node @class_body.defs
}

(class_body (_)@declaration)@class_body {
  edge @class_body.defs -> @declaration.defs
  edge @declaration.lexical_scope -> @class_body.lexical_scope
}

;; =====================
;;  Member Declarations
;; =====================

(field_declaration
  type: (_) @type
  declarator: (variable_declarator
    name: (_) @name
  )
) @field_decl
{
  node @field_decl.defs
  node @field_decl.lexical_scope
  edge @type.lexical_scope -> @field_decl.lexical_scope

  node member
  edge @field_decl.defs -> member

  attr (member) pop_symbol = "."

  node def
  attr (def) node_definition = @name
  edge member -> def
}

(modifiers) @this {
  node @this.lexical_scope
}

(modifiers (_) @annotation) @this {
  edge @annotation.ref -> @this.lexical_scope
}

(marker_annotation name: (_) @name) @this {
  node @this.ref
  attr (@this.ref) node_reference = @name
}

(annotation name: (_) @name) @this {
  node @this.ref
  attr (@this.ref) node_reference = @name
}

(modifiers (annotation arguments: (annotation_argument_list (_) @value))) @this {
  edge @value.lexical_scope -> @this.lexical_scope
}

(element_value_pair value: (_) @value) @this {
  node @this.lexical_scope
  edge @value.lexical_scope -> @this.lexical_scope
}

(field_declaration (modifiers) @modifiers) @decl {
  edge @modifiers.lexical_scope -> @decl.lexical_scope
}

(method_declaration
  type: (_) @type
  name: (identifier) @name
  body: (block) @block) @method
{
  node @method.defs
  node @method.lexical_scope

  edge @type.lexical_scope -> @method.lexical_scope

  node member
  edge @method.defs -> member

  attr (member) pop_symbol = "."

  node def
  attr (def) node_definition = @name
  edge member -> def
}

(method_declaration (formal_parameters (_) @param)) @method
{
  edge @param.lexical_scope -> @method.lexical_scope
  edge @method.lexical_scope -> @param.def
  edge @method.defs -> @param.def
}

(formal_parameter type: (_) @type (_) @id) @param
{
  node @param.def
  node @param.lexical_scope
  node def__typeof

  edge @type.lexical_scope -> @param.lexical_scope

  attr (@param.def) node_definition = @id

  attr (def__typeof) pop_symbol = ":"
  edge def__typeof -> @type.type

  edge @param.def -> def__typeof
}

(method_declaration
  body: (_) @stmt) @method
{
  edge @stmt.before_scope -> @method.lexical_scope
}


;; ============
;;  Statements
;; ============

[
  (assert_statement)
  (block)
  (break_statement)
  (continue_statement)
  (declaration)
  (do_statement)
  (expression_statement)
  (enhanced_for_statement)
  (for_statement)
  (if_statement)
  (labeled_statement)
  (local_variable_declaration)
  (return_statement)
  (switch_expression)
  (synchronized_statement)
  (try_statement)
  (try_with_resources_statement)
  (while_statement)
  (yield_statement)
] @stmt
{
  node @stmt.before_scope
  node @stmt.after_scope
}

(assert_statement) @stmt {
  edge @stmt.after_scope -> @stmt.before_scope
}

(assert_statement (expression) @expr) @stmt {
  edge @expr.lexical_scope -> @stmt.before_scope
}

(block
  (_) @left
  .
  (_) @right
)
{
  edge @right.before_scope -> @left.after_scope
}

(block
  .
  (_) @first) @block {
  edge @first.before_scope -> @block.before_scope
}

(block
  (_) @last
  . ) @block {
  edge @block.after_scope -> @last.after_scope
}

(break_statement) @stmt {
  ; FIXME: labels
}

(continue_statement) @stmt {
  ; FIXME: labels
}

(declaration) @decl {}

(do_statement body: (_) @body condition: (_) @cond) @stmt {
  edge @body.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
  edge @cond.lexical_scope -> @stmt.before_scope
}

(expression_statement (_) @expr) @expr_stmt
{
  edge @expr.lexical_scope -> @expr_stmt.before_scope
  edge @expr_stmt.after_scope -> @expr_stmt.before_scope
}

(enhanced_for_statement type: (_) @type (_) @id value: (_) @value body: (_) @body) @stmt {
  edge @type.lexical_scope -> @stmt.before_scope
  edge @value.lexical_scope -> @stmt.before_scope
  node def
  node defs
  attr (def) node_definition = @id
  edge defs -> @stmt.before_scope
  edge defs -> def
  edge @body.before_scope -> defs
  edge @stmt.after_scope -> @stmt.before_scope
}

(for_statement init: (expression) @init condition: (_) @condition update: (_) @update body: (_) @body) @stmt {
  edge @init.lexical_scope -> @stmt.before_scope
  edge @condition.lexical_scope -> @stmt.before_scope
  edge @update.lexical_scope -> @stmt.before_scope
  edge @body.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(for_statement init: (local_variable_declaration) @init condition: (_) @condition update: (_) @update body: (_) @body) @stmt {
  edge @init.before_scope -> @stmt.before_scope
  edge @condition.lexical_scope -> @init.after_scope
  edge @update.lexical_scope -> @init.after_scope
  edge @body.before_scope -> @init.after_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(if_statement condition: (_) @condition consequence: (_) @consequence) @stmt {
  edge @condition.lexical_scope -> @stmt.before_scope
  edge @consequence.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(if_statement alternative: (_) @alternative) @stmt {
  edge @alternative.before_scope -> @stmt.before_scope
}

(labeled_statement (identifier) @id (statement) @child) @stmt {
  edge @child.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @child.after_scope
  ; FIXME: labels
}

(local_variable_declaration
  type: (_) @type
  declarator: (variable_declarator
    name: (_) @name
  )
) @local_var
{
  node def
  attr (def) node_definition = @name
  edge @local_var.after_scope -> def
  edge @local_var.after_scope -> @local_var.before_scope
  attr (@local_var.after_scope -> @local_var.before_scope) precedence = 1

  edge @type.lexical_scope -> @local_var.before_scope

  node def__typeof
  attr (def__typeof) pop_symbol = ":"

  edge def -> def__typeof

  edge def__typeof -> @type.type
}

(local_variable_declaration
  type: (generic_type
    (type_identifier) @type
    (type_arguments
      (type_identifier) @type_identifier))) @local_var {
  node @type_identifier.value
  attr(@type_identifier.value) node_reference = @type_identifier

  node @type.value
  attr(@type.value) node_reference = @type

  edge @type.value -> @local_var.after_scope
  edge @type_identifier.value -> @local_var.after_scope
}

(return_statement (_) @expr) @stmt
{
  edge @expr.lexical_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(switch_expression condition: (_) @condition body: (_) @body) @stmt {
  edge @condition.lexical_scope -> @stmt.before_scope
  edge @body.lexical_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(switch_block) @this {
  node @this.lexical_scope
}

(switch_block (switch_block_statement_group (switch_label) @label)) @this {
  edge @label.lexical_scope -> @this.lexical_scope
}

(switch_block (switch_block_statement_group (switch_label)+ . (statement) @first)) @this {
  edge @first.before_scope -> @this.lexical_scope
}

(switch_block (switch_block_statement_group (switch_label)+ (statement) @a . (statement) @b)) @this {
  edge @b.before_scope -> @a.after_scope
}

(switch_block (switch_rule (switch_label) @label (_) @body)) @this {
  edge @label.lexical_scope -> @this.lexical_scope
  edge @body.before_scope -> @this.lexical_scope
}

(switch_label) @label {
  node @label.lexical_scope
}

(switch_label (expression) @expr) @label {
  edge @expr.lexical_scope -> @label.lexical_scope
}

(synchronized_statement (_) @expr body: (_) @body) @stmt {
  edge @expr.lexical_scope -> @stmt.before_scope
  edge @body.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(try_statement body: (_) @body) @stmt {
  edge @body.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(try_statement (catch_clause (catch_formal_parameter (catch_type) @type (_) @id) body: (_) @body)) @stmt {
  node def
  node defs
  attr (def) node_definition = @id
  edge defs -> def
  edge @body.before_scope -> defs
  edge defs -> @stmt.before_scope

  edge @type.lexical_scope -> @stmt.before_scope

  node def__typeof
  attr (def__typeof) pop_symbol = ":"

  edge def -> def__typeof

  edge def__typeof -> @type.type
}

(catch_type) @catch_type {
  node @catch_type.type
  node @catch_type.lexical_scope
}

(catch_type (_) @type) @catch_type {
  edge @catch_type.type -> @type.type
  edge @type.lexical_scope -> @catch_type.lexical_scope
}

(try_statement (finally_clause (_) @finally)) @stmt {
  edge @finally.before_scope -> @stmt.before_scope
}

(try_with_resources_statement) @stmt {
  edge @stmt.after_scope -> @stmt.before_scope
}

(try_with_resources_statement resources: (resource_specification . (resource) @first)) @stmt {
  edge @first.before_scope -> @stmt.before_scope
}

(try_with_resources_statement resources: (resource_specification (resource) @a . (resource) @b)) @stmt {
  edge @b.before_scope -> @a.after_scope
}

(try_with_resources_statement resources: (resource_specification (resource) @last .) body: (_) @body) @stmt {
  edge @body.before_scope -> @last.after_scope
}

(resource) @this {
  node @this.before_scope
  node @this.after_scope
}

(resource type: (_) @type (_) @id value: (_) @value) @this {
  edge @type.lexical_scope -> @this.before_scope
  edge @value.lexical_scope -> @this.before_scope

  node def
  attr (def) node_definition = @id

  node def__typeof
  attr (def__typeof) pop_symbol = ":"

  edge def -> def__typeof

  edge def__typeof -> @type.type

  edge @this.after_scope -> def
  edge @this.after_scope -> @this.before_scope
}

(resource . (identifier) @id .) @this {
  node @id.lexical_scope
  node @id.type

  node ref
  node ref__typeof

  attr (ref) node_reference = @id

  edge ref -> @id.lexical_scope
  edge @id.lexical_scope -> @this.before_scope

  edge @id.type -> ref__typeof

  attr (ref__typeof) push_symbol = ":"
  edge ref__typeof -> ref

  edge @this.after_scope -> @this.before_scope
}

(resource (field_access) @field_access) @this {
  edge @field_access.lexical_scope -> @this.before_scope
  edge @this.after_scope -> @this.before_scope
}

(try_with_resources_statement (catch_clause (catch_formal_parameter (catch_type) @type (_) @id) body: (_) @body)) @stmt {
  node def
  node defs
  attr (def) node_definition = @id
  edge defs -> def
  edge @body.before_scope -> defs
  edge defs -> @stmt.before_scope

  edge @type.lexical_scope -> @stmt.before_scope

  node def__typeof
  attr (def__typeof) pop_symbol = ":"

  edge def -> def__typeof

  edge def__typeof -> @type.type
}

(try_with_resources_statement (finally_clause (_) @finally)) @stmt {
  edge @finally.before_scope -> @stmt.before_scope
}

(while_statement condition: (_) @condition body: (_) @body) @stmt {
  edge @condition.lexical_scope -> @stmt.before_scope
  edge @body.before_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

(yield_statement (_) @expr) @stmt {
  edge @expr.lexical_scope -> @stmt.before_scope
  edge @stmt.after_scope -> @stmt.before_scope
}

;; =====================
;;  Primary Expressions
;; =====================

(primary_expression/identifier) @ident
{
  node member
  node implicit_this
  node implicit_this__typeof

  node object__typeof

  attr (implicit_this) symbol_reference = "this", empty_source_span
  edge implicit_this__typeof -> implicit_this
  attr (implicit_this__typeof) push_symbol = ":"
  edge implicit_this -> @ident.lexical_scope

  node ref
  attr (ref) node_reference = @ident
  edge ref -> @ident.lexical_scope
  attr (ref -> @ident.lexical_scope) precedence = 1
  edge ref -> member

  attr (member) push_symbol = "."

  edge member -> object__typeof
  edge object__typeof -> implicit_this__typeof

  node ref__typeof
  edge @ident.type -> ref__typeof

  attr (ref__typeof) push_symbol = ":"
  edge ref__typeof -> ref
}

(field_access
  object: (_) @object
  field: (identifier) @identifier) @field_access {
  node member

  edge @object.lexical_scope -> @field_access.lexical_scope

  node ref
  attr (ref) node_reference = @identifier
  edge ref -> member

  attr (member) push_symbol = "."
  edge member -> @object.type

  node ref__typeof
  edge @field_access.type -> ref__typeof

  attr (ref__typeof) push_symbol = ":"
  edge ref__typeof -> ref
}

(method_invocation) @method_invocation
{
  node @method_invocation.before_scope
  node @method_invocation.after_scope
}

(method_invocation arguments: (argument_list (expression) @expr)) @method_invocation {
  edge @expr.lexical_scope -> @method_invocation.lexical_scope
}

; method calls with implicit receiver
(method_invocation
  !object
  name: (identifier) @method_name) @method_invocation {
  node member
  node implicit_this
  node implicit_this__typeof

  node object__typeof

  ; attr (implicit_this) node_reference = @method_invocation
  attr (implicit_this) symbol_reference = "this", empty_source_span

  ; receiver is implicitly "this"
  edge implicit_this__typeof -> implicit_this
  attr (implicit_this__typeof) push_symbol = ":"
  edge implicit_this -> @method_invocation.lexical_scope

  node expr_ref
  attr (expr_ref) node_reference = @method_name
  edge expr_ref -> member

  attr (member) push_symbol = "."

  edge member -> object__typeof
  edge object__typeof -> implicit_this__typeof

  node expr_ref__typeof
  edge @method_invocation.type -> expr_ref__typeof

  attr (expr_ref__typeof) push_symbol = ":"
  edge expr_ref__typeof -> expr_ref
}

(local_variable_declaration
  type: (type_identifier) @type
  declarator: (variable_declarator
    name: (identifier) @identifier
    value: (object_creation_expression
      type: (type_identifier) @object)
  )) @local_variable {
  node @object.value
  attr (@object.value) node_reference = @object
  node @type.value
  attr(@type.value) node_reference = @type
  edge @type.value -> @local_variable.after_scope
  edge @local_variable.after_scope -> @object.value
  edge @object.value -> @local_variable.after_scope
}

;; =============
;;  Expressions
;; =============

[
  (expression)
  (field_access)
  (parenthesized_expression)
  (primary_expression)
  (super)
] @expr
{
  node @expr.type
  node @expr.lexical_scope
}

[
  (super)
  (this)
] @expr
{
  node expr_ref
  node expr_ref__typeof

  attr (expr_ref) node_reference = @expr
  edge expr_ref -> @expr.lexical_scope

  edge @expr.type -> expr_ref__typeof

  attr (expr_ref__typeof) push_symbol = ":"
  edge expr_ref__typeof -> expr_ref
}

(method_invocation
  object: (_) @object
  name: (identifier) @method_name) @method_invocation {
    node member

    edge @object.lexical_scope -> @method_invocation.lexical_scope

    node expr_ref
    attr (expr_ref) node_reference = @method_name
    edge expr_ref -> member

    attr (member) push_symbol = "."
    edge member -> @object.type

    node expr_ref__typeof
    edge @method_invocation.type -> expr_ref__typeof

    attr (expr_ref__typeof) push_symbol = ":"
    edge expr_ref__typeof -> expr_ref
}

(parenthesized_expression (_) @child) @expr {
  edge @child.lexical_scope -> @expr.lexical_scope
}

;; ==========
;;  Types
;; ==========

[
  (annotated_type)
  (array_type)
  (boolean_type)
  (floating_point_type)
  (generic_type)
  (integral_type)
  (scoped_type_identifier)
  (type_identifier)
  (void_type)
] @type
{
  node @type.lexical_scope
  node @type.type
}

[
  (boolean_type)
  (floating_point_type)
  (integral_type)
  (type_identifier)
  (void_type)
] @type
{
  attr (@type.type) node_reference = @type
}

(array_type element: (_) @child) @this {
  edge @child.lexical_scope -> @this.lexical_scope
  ; FIXME: use some sort of subscripting relation for .type
}

(generic_type . (_) @name) @this {
  edge @name.lexical_scope -> @this.lexical_scope
}

(generic_type (type_arguments (_) @type)) @this {
  edge @type.lexical_scope -> @this.lexical_scope
}

(type_identifier) @this
{
  edge @this.type -> @this.lexical_scope
}

;; ==========
;;  Comments
;; ==========

(line_comment)@line_comment {
  node @line_comment.before_scope
  node @line_comment.after_scope
  node @line_comment.lexical_defs
  node @line_comment.lexical_scope
  node @line_comment.defs

  edge @line_comment.after_scope -> @line_comment.before_scope
}

(block_comment)@block_comment {
  node @block_comment.before_scope
  node @block_comment.after_scope

  edge @block_comment.after_scope -> @block_comment.before_scope
}
