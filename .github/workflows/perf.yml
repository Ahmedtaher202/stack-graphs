name: Performance testing
on:
  pull_request:
    paths:
      - 'stack-graphs/**'
env:
  BASE_REPO: ${{ github.event.pull_request.base.repo.owner.login }}/${{ github.event.pull_request.base.repo.name }}
  BASE_SHA: ${{ github.event.pull_request.base.sha }}
  BASE_MASSIF_OUT: base-perf.out
  BASE_REPORT: base-perf.txt
  BASE_ARTIFACT: base-perf-results
  HEAD_REPO: ${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  HEAD_MASSIF_OUT: head-perf.out
  HEAD_REPORT: head-perf.txt
  HEAD_ARTIFACT: head-perf-results
  TEST_REPO: microsoft/TypeScript
  TEST_REF: v4.9.5
  TEST_DIR: test
  TEST_SRC: src/compiler
  TSSG_TS: tree-sitter-stack-graphs-typescript

jobs:
  ##
  ## Base performance
  ##
  base-perf:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: base
    steps:
      #
      # Install tools
      #
      - name: Install Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
          key: ${{ runner.OS }}-cargo-home
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      #
      # Checkout code
      #
      - name: "Checkout base code"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BASE_REPO }}
          ref: ${{ env.BASE_SHA }}
          path: ${{ env.BASE_DIR }}
      #
      # Cache results
      #
      - name: "Cache base result"
        id: cache-base-result
        uses: actions/cache@v3
        with:
          path: ${{ env.BASE_MASSIF_OUT }}
          key: ${{ runner.os }}-${{ env.BASE_REPO }}@${{ env.BASE_SHA }}-${{ env.TEST_REPO }}@${{ env.TEST_REF }}/${{ env.TEST_SRC }}
      #
      # Build code
      #
      - name: "Build base CLI"
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        run: cargo build --package ${{ env.TSSG_TS }} --features cli --release
        working-directory: ${{ env.BASE_DIR }}
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      #
      # Test performance
      #
      - name: Checkout test code
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TEST_REPO }}
          ref: ${{ env.TEST_REF }}
          path: ${{ env.TEST_DIR }}
      - name: Profile base memory
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.BASE_MASSIF_OUT }} \
            ${{ env.BASE_DIR }}/target/release/${{ env.TSSG_TS }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
          ms_print ${{ env.BASE_MASSIF_OUT }} > ${{ env.BASE_REPORT }}
      #
      # Upload results
      #
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BASE_ARTIFACT }}
          path: |
            ${{ env.BASE_MASSIF_OUT }}
            ${{ env.BASE_REPORT }}
  ##
  ## Head performance
  ##
  head-perf:
    runs-on: ubuntu-latest
    env:
      HEAD_DIR: head
    steps:
      #
      # Install tools
      #
      - name: Install Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
          key: ${{ runner.OS }}-cargo-home
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      #
      # Checkout code
      #
      - name: "Checkout head code"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.HEAD_REPO }}
          ref: ${{ env.HEAD_SHA }}
          path: ${{ env.HEAD_DIR }}
      #
      # Cache results
      #
      - name: "Cache head result"
        id: cache-head-result
        uses: actions/cache@v3
        with:
          path: ${{ env.HEAD_MASSIF_OUT }}
          key: ${{ runner.os }}-${{ env.HEAD_REPO }}@${{ env.HEAD_SHA}}-${{ env.TEST_REPO }}@${{ env.TEST_REF }}/${{ env.TEST_SRC }}
      #
      # Build code
      #
      - name: "Build head CLI"
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        run: cargo build --package ${{ env.TSSG_TS }} --features cli --release
        working-directory: ${{ env.HEAD_DIR }}
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      #
      # Test performance
      #
      - name: Checkout test code
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TEST_REPO }}
          ref: ${{ env.TEST_REF }}
          path: ${{ env.TEST_DIR }}
      - name: Profile head memory
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.HEAD_MASSIF_OUT }} \
            ${{ env.HEAD_DIR }}/target/release/${{ env.TSSG_TS }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
          ms_print ${{ env.HEAD_MASSIF_OUT }} > ${{ env.HEAD_REPORT }}
      #
      # Upload results
      #
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.HEAD_ARTIFACT }}
          path: |
            ${{ env.HEAD_MASSIF_OUT }}
            ${{ env.HEAD_REPORT }}
  ##
  ## Performance summary
  ##
  perf-summary:
    runs-on: ubuntu-latest
    needs:
      - base-perf
      - head-perf
    env:
      COMMENT_JSON: perf-summary.json
    steps:
      #
      # Install tools
      #
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      #
      # Download results
      #
      - name: Download base results
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BASE_ARTIFACT }}
      - name: Download head results
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.HEAD_ARTIFACT }}
      #
      # Create report
      #
      - name: "Checkout code"
        uses: actions/checkout@v3
      - name: Generate summary
        run: |
          script/ci-perf-summary-md \
            ${{ env.BASE_MASSIF_OUT }} \
            ${{ env.HEAD_MASSIF_OUT }} \
            'Comparing base ${{ env.BASE_REPO }}@${{ env.BASE_SHA }} with head ${{ env.HEAD_REPO }}@${{ env.HEAD_SHA }} on [${{ env.TEST_REPO }}@${{ env.TEST_REF }}](${{ github.server_url }}/${{ env.TEST_REPO }}/tree/${{ env.TEST_REF }}). For details see [workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) artifacts.' \
          | script/ci-comment-json > ${{ env.COMMENT_JSON }}
      - name: Add summary comment to PR
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.event.pull_request.comments_url }} \
            -d '@${{ env.COMMENT_JSON }}'
