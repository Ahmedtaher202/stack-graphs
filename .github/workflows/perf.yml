name: Performance testing
on:
  pull_request:
    paths:
      - 'stack-graphs/**'
env:
  BASE_REPO: ${{ github.event.pull_request.base.repo.owner.login }}/${{ github.event.pull_request.base.repo.name }}
  BASE_SHA: ${{ github.event.pull_request.base.sha }}
  HEAD_REPO: ${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  BIN: tree-sitter-stack-graphs-typescript
  TEST_DIR: perf
  TEST_SRC: src/compiler/binder.ts
  MASSIF_OUT: perf.out

jobs:
  base-perf:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BASE_REPO }}
          ref: ${{ env.BASE_SHA }}
      - name: Build CLI
        run: cargo build --package ${{ env.BIN }} --features cli --release
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      - name: Checkout test code
        uses: actions/checkout@v3
        with:
          repository: microsoft/TypeScript
          ref: v4.9.5
          path: ${{ env.TEST_DIR }}
      - name: Profile memory
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.MASSIF_OUT }} \
            target/release/${{ env.BIN }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
      - name: Set output
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "massif-out<<$EOF" >> $GITHUB_OUTPUT
          cat ${{ env.MASSIF_OUT }}
          echo "$EOF" >> $GITHUB_OUTPUT

  head-perf:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.HEAD_REPO }}
          ref: ${{ env.HEAD_SHA }}
      - name: Build CLI
        run: cargo build --package ${{ env.BIN }} --features cli --release
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      - name: Checkout test code
        uses: actions/checkout@v3
        with:
          repository: microsoft/TypeScript
          ref: v4.9.5
          path: ${{ env.TEST_DIR }}
      - name: Profile memory
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.MASSIF_OUT }} \
            target/release/${{ env.BIN }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
      - name: Set output
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | head64)
          echo "massif-out<<$EOF" >> $GITHUB_OUTPUT
          cat ${{ env.MASSIF_OUT }}
          echo "$EOF" >> $GITHUB_OUTPUT

  report:
    runs-on: ubuntu-latest
    needs:
      - base-perf
      - head-perf
    env:
      BASE_MASSIF_OUT: base-perf.out
      HEAD_MASSIF_OUT: head-perf.out
      REPORT_COMMENT: perf-report.json
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Store base result
        uses: DamianReeves/write-file-action@v1.2
        with:
          path: ${{ env.BASE_MASSIF_OUT }}
          contents: ${{ steps.base-perf.outputs.massif-out }}
      - name: Store head result
        uses: DamianReeves/write-file-action@v1.2
        with:
          path: ${{ env.HEAD_MASSIF_OUT }}
          contents: ${{ steps.head-perf.outputs.massif-out }}
      - name: Generate report
        run: |
          script/ci-perf-report-md \
            ${{ env.BASE_MASSIF_OUT }} \
            ${{ env.HEAD_MASSIF_OUT }} \
            'Comparing base ${{ env.BASE_REPO }}@${{ env.BASE_SHA }} with head ${{ env.HEAD_REPO }}@${{ env.HEAD_SHA }} on https://github.com/microsoft/TypeScript/tree/v4.9.5/src/compiler.' \
          | script/ci-comment-json >> ${{ env.REPORT_COMMENT }}
      - name: Comment on PR
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.event.pull_request.comments_url }} \
            -d '@${{ env.REPORT_COMMENT }}'
