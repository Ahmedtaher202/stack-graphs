name: Performance testing
on:
  pull_request:
    paths:
      - 'stack-graphs/**'

jobs:
  test-perf:
    runs-on: ubuntu-latest
    env:
      BASE_REPO: ${{ github.event.pull_request.base.repo.owner.login }}/${{ github.event.pull_request.base.repo.name }}
      BASE_SHA: ${{ github.event.pull_request.base.sha }}
      BASE_DIR: base
      BASE_MASSIF_OUT: base-perf.out
      HEAD_REPO: ${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      HEAD_DIR: head
      HEAD_MASSIF_OUT: head-perf.out
      TEST_REPO: microsoft/TypeScript
      TEST_REF: v4.9.5
      TEST_DIR: test
      TEST_SRC: src/compiler/binder.ts
      TSSG_TS: tree-sitter-stack-graphs-typescript
      REPORT_COMMENT: perf-report.json
    steps:
      #
      # Install tools
      #
      - name: Install Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ${{ env.BASE_DIR }}/target
            ${{ env.HEAD_DIR }}/target
          key: ${{ runner.OS }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-cargo-
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind
      #
      # Checkout test code
      #
      - name: Checkout test code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.TEST_REPO }}
          ref: ${{ env.TEST_REF }}
          path: ${{ env.TEST_DIR }}
      #
      # Test base performance
      #
      - name: "Cache base result"
        id: cache-base-result
        uses: actions/checkout@v3
        with:
          path: ${{ env.BASE_MASSIF_OUT }}
          key: ${{ runner.os }}-${{ env.BASE_REPO }}@${{ env.BASE_SHA}}-${{ env.TEST_REPO }}@${{ env.TEST_REF }}/${{ env.TEST_SRC }}
      - name: "Checkout base code"
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BASE_REPO }}
          ref: ${{ env.BASE_SHA }}
          path: ${{ env.BASE_DIR }}
      - name: "Build base CLI"
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        run: cargo build --package ${{ env.TSSG_TS }} --features cli --release
        working-directory: ${{ env.BASE_DIR }}
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      - name: Profile base memory
        if: steps.cache-base-result.outputs.cache-hit != 'true'
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.BASE_MASSIF_OUT }} \
            ${{ env.BASE_DIR }}/target/release/${{ env.TSSG_TS }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
      #
      # Test head performance
      #
      - name: "Cache head result"
        id: cache-head-result
        uses: actions/checkout@v3
        with:
          path: ${{ env.HEAD_MASSIF_OUT }}
          key: ${{ runner.os }}-${{ env.HEAD_REPO }}@${{ env.HEAD_SHA}}-${{ env.TEST_REPO }}@${{ env.TEST_REF }}/${{ env.TEST_SRC }}
      - name: "Checkout head code"
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ env.HEAD_REPO }}
          ref: ${{ env.HEAD_SHA }}
          path: ${{ env.HEAD_DIR }}
      - name: "Build head CLI"
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        run: cargo build --package ${{ env.TSSG_TS }} --features cli --release
        working-directory: ${{ env.HEAD_DIR }}
        env:
          CARGO_PROFILE_RELEASE_DEBUG: true
      - name: Profile head memory
        if: steps.cache-head-result.outputs.cache-hit != 'true'
        run: |
          valgrind \
            --tool=massif \
            --massif-out-file=${{ env.HEAD_MASSIF_OUT }} \
            ${{ env.HEAD_DIR }}/target/release/${{ env.TSSG_TS }} \
              analyze --max-file-time=30 --hide-error-details -- ${{ env.TEST_DIR }}/${{ env.TEST_SRC }}
      #
      # Create report
      #
      - name: Generate report
        run: |
          script/ci-perf-report-md \
            ${{ env.BASE_MASSIF_OUT }} \
            ${{ env.HEAD_MASSIF_OUT }} \
            'Comparing base ${{ env.BASE_REPO }}@${{ env.BASE_SHA }} with head ${{ env.HEAD_REPO }}@${{ env.HEAD_SHA }} on `${{ env.TEST_SRC }}` in ${{ env.TEST_REPO }}@${{ env.TEST_REF }}.' \
          | script/ci-comment-json >> ${{ env.REPORT_COMMENT }}
      - name: Add report comment to PR
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.event.pull_request.comments_url }} \
            -d '@${{ env.REPORT_COMMENT }}'
